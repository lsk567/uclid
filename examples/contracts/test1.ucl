module m1 {
    
    input a : integer;
    output b : integer;

    // Sub-formulas
    define A(a : integer, b : integer) : boolean
    = a < 0;
    define G(a : integer, b : integer) : boolean
    = b < 0;

    init {
        b = a;
    }

    next {
        // Uncommenting one of the lines below changes the result of ag_hierarchy.
        // The result should be based on only the contract formulas and not impl.
        b' = -a';     // Both assertions pass.
        // b' = a' * -1;   // One assertion fails.
    }

    // The contract is transpiled into the following:
    // property C : A(a, b) ==> G(a, b);
    contract C : assume_guarantee((A(a, b)), (G(a,b)));

    control {
        print_module;
        // Check the contract by performing induction on A ==> G.
        v = ag_induction; 
        check;
        print_results;
        v.print_cex;
    }
}

module m2 {
    
    input a : integer;
    output b : integer;

    // Sub-formulas
    define A(a : integer, b : integer) : boolean
    = true;
    define G(a : integer, b : integer) : boolean
    = b == a + 1;

    init {
        b = a + 1;
    }

    next {
        b' = a' + 1;
    }

    contract C : assume_guarantee((A(a, b)), (G(a,b)));

    control {
        print_module;
        v = ag_induction;
        check;
        print_results;
        v.print_cex;
    }
}

module M {
    
    input a : integer;
    output b : integer;
    var wire : integer;
    var wire2 : integer;

    instance _m1 : m1(a : (a), b : (wire));
    instance _m2 : m2(a : (wire), b : (b));

    // Expected invalid.
    // Returns valid.
    define A() : boolean = a < 0;
    define G() : boolean = b == -1 * a;

    init {
        wire = 0;
    }

    // In order for the high-level module to respect contract
    // composition, we need to restrict how it is written.
    // For example, if only either of m1 and m2 steps, then
    // the composition does not respect the semantics of
    // contract composition.
    next {
        next(_m1);
        next(_m2);
    }

    // Notes:
    // 1. Expressing the composition of m1 and m2's contracts as follows:
    // define G_composed() : boolean = (G_m1 && G_m2);
    // define A_composed() : boolean = ((A_m1 && A_m2) || !G_composed();
    //
    // 2. How to check the composed contract satisfy the system-level contract?
    // property A_refinement_holds : A() ==> A_composed();
    // property G_refinement_holds : G_composed() ==> G();

    contract C : assume_guarantee((A()), (G()));

    control {
        print_module;
        v = ag_hierarchy;
        check;
        print_results;
        v.print_cex;
    }
}

