module m1 {
    
    input a : integer;
    output b : integer;

    // Assumption
    define A(a : integer, b : integer) : boolean
    = a < 0;

    // Guarantee
    define G(a : integer, b : integer) : boolean
    = b == 1 * a;

    init {
        b = a * 1;
    }

    next {
        b' = a' * 1;
    }

    // The contract is transpiled into the following:
    // property C : A(a, b) ==> G(a, b);
    contract C : assume_guarantee((A(a, b)), (G(a,b)));

    control {
        print_module;
        // Check the contract by performing induction on A ==> G.
        v = ag_induction; 
        check;
        print_results;
        v.print_cex;
    }
}

module m2 {
    
    input a : integer;
    output b : integer;

    // Assumption
    define A(a : integer, b : integer) : boolean
    = true;

    // Guarantee
    define G(a : integer, b : integer) : boolean
    = b == a + 1;

    init {
        b = a + 1;
    }

    next {
        b' = a' + 1;
    }

    contract C : assume_guarantee((A(a, b)), (G(a,b)));

    control {
        print_module;
        v = ag_induction;
        check;
        print_results;
        v.print_cex;
    }
}

module M {
    
    input a : integer;
    output b : integer;
    var wire : integer;
    var wire2 : integer;

    // Composed A: (a < 0) && (true) || !(b < 0 && b == a + 1)
    // Composed G: b < 0 && b == a + 1
    // A1: a < 0, G1: b < 0
    instance _m1 : m1(a : (a), b : (wire));
    // A2: true, G2: b == a + 1
    instance _m2 : m2(a : (wire), b : (b));

    // Assumption
    define A() : boolean = a < 0;
    // Guarantee
    define G() : boolean = b == 1 * a + 1;

    init {
        wire = 0;
    }

    // In order for the high-level module to respect contract
    // composition, the contracts need to step together.
    // If only either of m1 and m2 steps, then
    // the composition does not respect the semantics of
    // contract composition.
    next {
        next(_m1);
        next(_m2);
    }

    contract C : assume_guarantee((A()), (G()));

    // How to check the composed contract satisfy the system-level contract?
    // property A_is_refinement : A() ==> A_composed();
    // property G_is_refinement : G_composed() ==> G();

    control {
        print_module;
        v = ag_hierarchy;
        check;
        print_results;
        v.print_cex;
    }
}

